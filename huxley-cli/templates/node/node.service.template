#===============================================================================
# {{{service.name}}} - service file generated from Huxley's "node" mixin
#===============================================================================

[Unit]
Description={{{service.name}}}
# List any services that must be online before or wait until after this service is activated.
After=docker.service

[Service]
TimeoutStartSec=0

ExecStartPre=/usr/bin/echo "========================"
ExecStartPre=/usr/bin/echo "  New Service Starting"
ExecStartPre=/usr/bin/echo "========================"

# Display this service's IP addresses.
EnvironmentFile=/etc/environment
ExecStartPre=/usr/bin/echo "Public IP Address: ${COREOS_PUBLIC_IPV4}"
ExecStartPre=/usr/bin/echo "Private IP Address: ${COREOS_PRIVATE_IPV4}"

# Register this service with Sidekick Server.
ExecStartPre=/usr/bin/echo "Registering Service with DNS.  This will take a moment..."
ExecStartPre=/usr/bin/curl -XPOST kick.{{{cluster.name}}}.cluster:2000/records -d '{ \
  "hostname": "{{{service.name}}}.{{{cluster.name}}}.{{{app.domain}}}", \
  "ip_address": "${COREOS_PUBLIC_IPV4}", "port": {{{service.external_port}}}, \
  "type": "A" }' -H 'Content-Type: application/vnd.kick.record+json; version=1.0; charset=UTF-8'

ExecStartPre=/usr/bin/bash -c "until curl kick.{{{cluster.name}}}.cluster:2000/record/{{{service.name}}}.{{{cluster.name}}}.{{{app.domain}}} | grep -o 'INSYNC'; do echo 'polling for another 5s'; sleep 5; done"

# Delete any old containers with this image.
ExecStartPre=-/usr/bin/docker kill {{{service.name}}}
ExecStartPre=-/usr/bin/docker rm {{{service.name}}}

# Build the service's Docker container.  We clone the project repo from the hook-server and then
# find the Dockerfile to launch a build.
ExecStartPre=-/usr/bin/bash -c "/usr/bin/rm -rf /home/core/launch/{{{service.name}}}"
ExecStartPre=/usr/bin/echo "Directory Checked"
ExecStartPre=/usr/bin/bash -c "/usr/bin/git clone -b {{{app.branch}}} git://hook.{{{cluster.name}}}.cluster:2001/repos/{{{app.name}}} /home/core/launch/{{{service.name}}}"
ExecStartPre=/usr/bin/docker build --tag="{{{service.name}}}_image" --no-cache /home/core/launch/{{{service.name}}}/launch/{{{service.name}}}/.

# Launch the container.
ExecStart=/usr/bin/docker run --name {{{service.name}}} -p {{{service.external_port}}}:{{{service.internal_port}}} \
{{{service.name}}}_image /bin/bash -c \
"cd {{{app.name}}} && {{{service.start}}}"

[Install]
WantedBy=multi-user.target
