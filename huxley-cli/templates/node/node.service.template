#===============================================================================
# {{{service_name}}} - service file generated from Huxley's "node" mixin
#===============================================================================

[Unit]
Description={{{service_name}}}
# List any services that must be online before or wait untl after this service is activated.
After=docker.service

[Service]
TimeoutStartSec=0

# Status: Starting
ExecStartPre=/usr/bin/curl -XPOST kick.{{{cluster_name}}}.cluster:2000/status -d '{
"service": "{{{service_name}}}",
"application_id": "{{{app_name}}}",
"deployment_id": "{{{deployment_id}}}",
"status": "starting",
"detail": { "starting": "Starting {{{service_name}}} service file." }
}' \
-H 'Content-Type: application/vnd.kick.status+json'

ExecStartPre=/usr/bin/echo "========================"
ExecStartPre=/usr/bin/echo "  New Service Starting"
ExecStartPre=/usr/bin/echo "========================"

# Display this service's IP addresses.
EnvironmentFile=/etc/environment
ExecStartPre=/usr/bin/echo "Public IP Address: ${COREOS_PUBLIC_IPV4}"
ExecStartPre=/usr/bin/echo "Private IP Address: ${COREOS_PRIVATE_IPV4}"


# Status: Pre Sidekick Register
ExecStartPre=/usr/bin/curl -XPOST kick.{{{cluster_name}}}.cluster:2000/status -d '{
"service": "{{{service_name}}}",
"application_id": "{{{app_name}}}",
"deployment_id": "{{{deployment_id}}}",
"status": "starting",
"detail": { "starting-pre-sidekick": "Registering the service with Sidekick Server." }
}' \
-H 'Content-Type: application/vnd.kick.status+json'

# Register this service with Sidekick Server.
ExecStartPre=/usr/bin/echo "Registering Service with DNS.  This will take a moment..."
ExecStartPre=/usr/bin/curl -XPOST kick.{{{cluster_name}}}.cluster:2000/records -d '{ \
  "hostname": "{{{service_name}}}.{{{cluster_name}}}.{{{public_domain}}}", \
  "ip_address": "${COREOS_PUBLIC_IPV4}", "port": {{{port}}}, \
  "type": "A" }' -H 'Content-Type: application/vnd.kick.record+json'

# Status: Post Sidekick Register
ExecStartPre=/usr/bin/curl -XPOST kick.{{{cluster_name}}}.cluster:2000/status -d '{
"service": "{{{service_name}}}",
"application_id": "{{{app_name}}}",
"deployment_id": "{{{deployment_id}}}",
"status": "starting",
"detail": { "starting-post-sidekick": "Done registering the service with Sidekick Server." }
}' \
-H 'Content-Type: application/vnd.kick.status+json'


# Status: Pre Kick Curl
ExecStartPre=/usr/bin/curl -XPOST kick.{{{cluster_name}}}.cluster:2000/status -d '{
"service": "{{{service_name}}}",
"application_id": "{{{app_name}}}",
"deployment_id": "{{{deployment_id}}}",
"status": "starting",
"detail": { "starting-pre-kick-curl": "Curling kick server for record." }
}' \
-H 'Content-Type: application/vnd.kick.status+json'

ExecStartPre=/usr/bin/bash -c "until curl kick.{{{cluster_name}}}.cluster:2000/record/{{{service_name}}}.{{{cluster_name}}}.{{{public_domain}}} | grep -o 'INSYNC'; do echo 'polling for another 5s'; sleep 5; done"

# Status: Post Kick Curl
ExecStartPre=/usr/bin/curl -XPOST kick.{{{cluster_name}}}.cluster:2000/status -d '{
"service": "{{{service_name}}}",
"application_id": "{{{app_name}}}",
"deployment_id": "{{{deployment_id}}}",
"status": "starting",
"detail": { "starting-post-kick-curl": "Done curling kick server for record." }
}' \
-H 'Content-Type: application/vnd.kick.status+json'




# Status: Pre Delete Old Containers
ExecStartPre=/usr/bin/curl -XPOST kick.{{{cluster_name}}}.cluster:2000/status -d '{
"service": "{{{service_name}}}",
"application_id": "{{{app_name}}}",
"deployment_id": "{{{deployment_id}}}",
"status": "starting",
"detail": { "starting-pre-delete-containers": "Deleting any old containers with this image." }
}' \
-H 'Content-Type: application/vnd.kick.status+json'

# Delete any old containers with this image.
ExecStartPre=-/usr/bin/docker kill {{{service_name}}}
ExecStartPre=-/usr/bin/docker rm {{{service_name}}}

# Status: Post Delete Old COntainers
ExecStartPre=/usr/bin/curl -XPOST kick.{{{cluster_name}}}.cluster:2000/status -d '{
"service": "{{{service_name}}}",
"application_id": "{{{app_name}}}",
"deployment_id": "{{{deployment_id}}}",
"status": "starting",
"detail": { "starting-post-delete-containers": "Done deleting any old containers with this image." }
}' \
-H 'Content-Type: application/vnd.kick.status+json'


# Status: Pre Build Container
ExecStartPre=/usr/bin/curl -XPOST kick.{{{cluster_name}}}.cluster:2000/status -d '{
"service": "{{{service_name}}}",
"application_id": "{{{app_name}}}",
"deployment_id": "{{{deployment_id}}}",
"status": "starting",
"detail": { "starting-pre-build-container": "Building the service's Docker container." }
}' \
-H 'Content-Type: application/vnd.kick.status+json'

# Build the service's Docker container.  We clone the project repo from the hook-server and then
# find the Dockerfile to launch a build.
ExecStartPre=-/usr/bin/bash -c "/usr/bin/rm -rf /home/core/launch/{{{service_name}}}"
ExecStartPre=/usr/bin/echo "Directory Checked"
ExecStartPre=/usr/bin/bash -c "/usr/bin/git clone -b {{{branch_name}}} git://hook.{{{cluster_name}}}.cluster:2001/repos/{{{app_name}}} /home/core/launch/{{{service_name}}}"
ExecStartPre=/usr/bin/docker build --tag="{{{service_name}}}_image" /home/core/launch/{{{service_name}}}/launch/{{{service_name}}}/.

# Status: Post Build Container
ExecStartPre=/usr/bin/curl -XPOST kick.{{{cluster_name}}}.cluster:2000/status -d '{
"service": "{{{service_name}}}",
"application_id": "{{{app_name}}}",
"deployment_id": "{{{deployment_id}}}",
"status": "starting",
"detail": { "starting-post-build-container": "Done building the service's Docker container." }
}' \
-H 'Content-Type: application/vnd.kick.status+json'


# Status: Pre Launch Container
ExecStartPre=/usr/bin/curl -XPOST kick.{{{cluster_name}}}.cluster:2000/status -d '{
"service": "{{{service_name}}}",
"application_id": "{{{app_name}}}",
"deployment_id": "{{{deployment_id}}}",
"status": "starting",
"detail": { "starting-pre-launch-container": "Launching the container." }
}' \
-H 'Content-Type: application/vnd.kick.status+json'

# Launch the container.
ExecStart=/usr/bin/docker run --name {{{service_name}}} -p {{{port}}}:80 \
{{{service_name}}}_image /bin/bash -c \
"cd {{{app_name}}} && {{{start_command}}}"

# Status: Post Launch Container
ExecStartPost=-/usr/bin/curl -XPOST kick.{{{cluster_name}}}.cluster:2000/status -d '{
"service": "{{{service_name}}}",
"application_id": "{{{app_name}}}",
"deployment_id": "{{{deployment_id}}}",
"status": "running",
"detail": { "running": "Service successfully launched." }
}' \
-H 'Content-Type: application/vnd.kick.status+json'


# Status: Stopped
ExecStop=-/usr/bin/curl -XPOST kick.{{{cluster_name}}}.cluster:2000/status -d '{
"service": "{{{service_name}}}",
"application_id": "{{{app_name}}}",
"deployment_id": "{{{deployment_id}}}",
"status": "stopped",
"detail": { "stopped": "Service was stopped." }
}' \
-H 'Content-Type: application/vnd.kick.status+json'

[Install]
WantedBy=multi-user.target
